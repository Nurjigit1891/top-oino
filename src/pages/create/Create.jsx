// Create.jsx
import React, { useState } from 'react';
import './Create.scss';
import Navbar from '../../components/navbar/Navbar';
import addMatch from '../../server/actions/createData/CreateData';
import CircularProgress from '@mui/material/CircularProgress';
import Snackbar from '@mui/material/Snackbar';
import MuiAlert from '@mui/material/Alert';



const Alert = React.forwardRef(function Alert(props, ref) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});


const Create = () => {

  const randomNumber = Math.floor(Math.random() * 9000) + 1000;
  
  const [formData, setFormData] = useState({
    matchID : randomNumber ,
    phoneNumber: '',
    date: '',
    price: '',
    authorName: '',
    address: '',
    comment: '',
    time: '',
    sportType: '',
    personalCode: '',
    count_players: '', 
  });

  const [loading, setLoading] = useState(false);  
  const [notification, setNotification] = useState({ open: false, message: '', severity: 'success' });

  const handleCloseNotification = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setNotification({ ...notification, open: false });
  };




  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
  
    try {
      await addMatch(formData);
      setNotification({ open: true, message: '–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', severity: 'success' });
      setFormData({  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö
        matchID: Math.floor(Math.random() * 9000) + 1000,
        phoneNumber: '',
        date: '',
        price: '',
        authorName: '',
        address: '',
        comment: '',
        time: '',
        sportType: '',
        personalCode: '',
        count_players: '',
      });
    } catch (error) {
      setNotification({ open: true, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞!', severity: 'error' });
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };
  




  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  return (
    <div>
      <div className="create">
        <Navbar />
        <div className="container">
          <div className="create-content">

            <div className="create-title">
              <h2>–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–±–æ—Ä</h2>
            </div>

            <div className="create-form">
              <form onSubmit={handleSubmit}>

                <div className="line-group">

                    <div className="form-group">
                    <label htmlFor="phoneNumber">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                    <input
                        type="tel"
                        id="phoneNumber"
                        name="phoneNumber"
                        value={formData.phoneNumber}
                        placeholder='+996 (701) 12 34 56'
                        onChange={handleChange}
                        required
                    />
                    </div>

                    <div className="form-group">
                      <label htmlFor="date">–î–∞—Ç–∞:</label>
                      <input
                          type="date"
                          id="date"
                          name="date"
                          value={formData.date}
                          onChange={handleChange}
                          required
                      />
                    </div>
                </div>

                <div className="line-group">
                    <div className="form-group">
                      <label htmlFor="price">–¶–µ–Ω–∞:</label>
                      <input
                          type="number"
                          id="price"
                          name="price"
                          value={formData.price}
                          onChange={handleChange}
                          placeholder='–í —Å–æ–º–∞—Ö'
                          required
                      />
                    </div>

                    <div className="form-group">
                      <label htmlFor="authorName">–ò–º—è –∞–≤—Ç–æ—Ä–∞:</label>
                      <input
                          type="text"
                          id="authorName"
                          name="authorName"
                          value={formData.authorName}
                          onChange={handleChange}
                          placeholder='–ê–∑–∞–º–∞—Ç'
                          required
                      />
                    </div>

                </div>

                <div className="line-group">
                    <div className="form-group">
                    <label htmlFor="address">–ê–¥—Ä–µ—Å:</label>
                    <input
                        type="text"
                        id="address"
                        name="address"
                        value={formData.address}
                        onChange={handleChange}
                        placeholder='–î—É—à–∞–Ω–±–∏–Ω–∫–∞ 28'
                        required
                    />
                    </div>


                    <div className="form-group">
                      <label htmlFor="time">–í—Ä–µ–º—è:</label>
                      <input
                          type="time"
                          id="time"
                          name="time"
                          value={formData.time}
                          onChange={handleChange}
                          required
                      />
                    </div>
                </div>

                <div className="line-group">
                  <div className="form-group">
                    <label htmlFor="personalCode">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥</label>
                    <input 
                      type="text"
                      id="personalCode"
                      name="personalCode"
                      placeholder="–ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ)"
                      maxLength={4}
                      minLength={4}
                      pattern="[0-9]{1,4}"  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π 4
                      title="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ –±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤."
                      required
                      onChange={handleChange}
                      value={formData.personalCode}
                    />

                  </div>


                    <div className="form-group">
                      <label htmlFor="sportType">–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</label>
                      <select
                        id="sportType"
                        name="sportType"
                        value={formData.sportType}
                        onChange={handleChange}
                        required
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                        <option value="football">–§—É—Ç–±–æ–ª ‚öΩÔ∏è</option>
                        <option value="basketball">–ë–∞—Å–∫–µ—Ç–±–æ–ª üèÄ</option>
                        <option value="volleyball">–í–æ–ª–µ–π–±–æ–ª üèê</option>
                      </select>
                    </div>

                </div>

                <div className="line-group">

                <div className="form-group">
                    <label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                    <textarea
                        id="comment"
                        name="comment"
                        rows="4"
                        value={formData.comment}
                        onChange={handleChange}
                        placeholder='–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç—Ä–∞–∏–π –¥–ª—è –ø–æ–¥–±–æ—Ä–∞'
                    ></textarea>
                </div>

                <div className="form-group">
                  <label htmlFor="count_players">–ö–æ–ª-–≤–æ –Ω—É–∂–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:</label>
                  <input 
                    type='number'
                    typeof='number'
                    id="count_players"
                    name="count_players"
                    value={formData.count_players}
                    onChange={handleChange}
                    required
                  />
                </div>
               

                </div>

                <div className="submit-button-div">
                  {loading ? (
                    <CircularProgress size={24} color="inherit" />
                  ) : (
                    <button className='submit-button' type="submit">–°–æ–∑–¥–∞—Ç—å</button>
                  )}
                </div>

                <Snackbar open={notification.open} autoHideDuration={6000} onClose={handleCloseNotification}>
                <Alert onClose={handleCloseNotification} severity={notification.severity}>
                  {notification.message}
                </Alert>
              </Snackbar>
              </form>
            </div>

          </div>
        </div>
      </div>
    </div>
  );
};

export default Create;
